#searchContainer
  label Suchfeld:
  input#search(type='text', size='50', placeholder='Beispielstrasse 4, 01234 Beispielhausen')
  button#searchButton(type='button', name='searchButton', text='Suche') Suche
  #loadsceen
    img#loader(src='/gifs/loader.gif', alt='')
#formContainer
  form
    fieldset
      legend Mein Standort
      p
        label Strasse:
        input#street(type='text',name='street',placeholder='Beispielstrasse 4',required='required') 
      p
        label Postleihzahl:
        input#zipcode(type='number',name='zipcode',placeholder='01234',required='required') 
      p
        label Ort:
        input#ort(type='text',name='location',placeholder='Beispielstadt',required='required')
    input(type='submit', value='Suche Tankstellen')
#mapContainer
  #map_canvas
  #infobar
    ul
      li Klick mich

script(type='text/javascript', src='http://code.jquery.com/jquery-1.7.2.min.js')
script(type='text/javascript', src='https://maps.google.com/maps/api/js?libraries=places,geometry&sensor=false&language=de&region=DE')
script(type='text/javascript', src='http://www.google.com/jsapi')
script(type='text/javascript')

  var geocoder = new google.maps.Geocoder();
  var geolocationFlag = new Boolean(false);
  var map;
  var displayCount = 0;
  
  
  function showLoadScreen() {
    if(displayCount == 0) {
      $('#loadsceen').css('display','block');
    }
    displayCount++;
  }
  
  function unshowLoadScreen() {
    displayCount--;
    if(displayCount == 0) {
      $('div#loadsceen').css('display','none');
    }
  }
  
  function getInitialLocation() {
    if(geocoder) {
      geolocationPackage(function(bool){
        //unshowLoadScreen();
        console.log('Callback ready');
        if(bool) {
          console.log('geoloc success');
        } else {
          console.log('geoloc failed - timeout');
        }
      });
      iplocationPackage();
      showLoadScreen();
    }
  }
  
  function geolocationPackage(callback) {
    console.log('Using geolocationPackage');

    function handleGeoLocation(position) {
      navigator.geolocation.received = true;
      geolocationFlag = true;
      if(geocoder) {
     
        function handleGeocodeResponseGeoLocation(results, status) {
          var ort = '';
          if(status == google.maps.GeocoderStatus.OK) {
            showMap(results[0].geometry.location,14,null);
            ort = results[0].formatted_address;
            var de = ', Deutschland';
            var i = ort.indexOf(de);
            if(i != -1) {
              ort = ort.substring(0,ort.length-de.length);
            }
            $('input#search').val(ort);     
            unshowLoadScreen();            
            callback(true);
          }
        }
        var latLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
        geocoder.geocode({'latLng':latLng}, handleGeocodeResponseGeoLocation);
      }
    }

    function handleGeoError(error) {
      navigator.geolocation.received = true;
      console.log('handlegeoerror');
      callback(false);
      unshowLoadScreen();
    }
    
    function handleGeoTimeout() {
      navigator.geolocation.timedout = true; // could be used for other callbacks to trace if its timed out or not
      !navigator.geolocation.received?alert('Request timed out'):null;    
      console.log('handlegeotimeout');
      unshowLoadScreen();
    }
    
    if(navigator.geolocation) {
      showLoadScreen();
      navigator.geolocation.retrievePermission = function retrievePermission(handleGeoLocation, handleGeoError, options, timeout) {
        this.received = false;
        this.timedout = false;
        this.getCurrentPosition.apply(this,arguments);

        if(timeout) {
          setTimeout(timeout.callback,timeout.offset || 5000);
        }
      }
     navigator.geolocation.retrievePermission(handleGeoLocation, handleGeoError, {timeout:20000},{offset: 30000, callback: handleGeoTimeout} );
      //navigator.geolocation.getCurrentPosition(handleGeoLocation, handleGeoError, {timeout:2000});
    }
  }

  function iplocationPackage() {
    if(geolocationFlag == true) return;
    console.log('Using iplocationPackage');
    var city = null;
    var country = null;
    var latLng = new google.maps.LatLng(google.loader.ClientLocation.latitude, google.loader.ClientLocation.longitude);
    
    function handleGeocodeResponseIp(results, status) {

      if(status == google.maps.GeocoderStatus.OK){
        for(var i=0; i<results[0].address_components.length; i++) {
          for(var j=0; j<results[0].address_components[i].types.length;j++) {
            if(results[0].address_components[i].types[j] == 'locality') {
              city = results[0].address_components[i].long_name;
            }
            if(results[0].address_components[i].types[j] == 'country') {
              country = results[0].address_components[i].short_name;
              
              function handleCityResponse(results, status) {
                var ort = '';
                if(status == google.maps.GeocoderStatus.OK){
                  showMap(results[0].geometry.location,8,results[0].geometry.viewport);
                  for(var i=0; i<results[0].address_components.length; i++) {
                    for(var j=0; j<results[0].address_components[i].types.length;j++) {
                      if(results[0].address_components[i].types[j] == 'locality') {
                        ort = results[0].address_components[i].long_name;
                      } else if(results[0].address_components[i].types[j] == 'postal_code') {
                        ort = results[0].address_components[i].long_name + ' ' + ort;
                      }
                    }
                  }
                  $('input#search').val(ort);
                  unshowLoadScreen();
                } else {
                  defaultlocationPackage();
                }
              }
              
              if(city && country == 'DE' && geocoder) {
                geocoder.geocode({'address':city + ' '+ country}, handleCityResponse);
              }else {
                defaultlocationPackage();
              }
            }
          }
        }
      }else{
        defaultlocationPackage();
      }      
    }
    
    if(geocoder) {
      geocoder.geocode({'latLng':latLng}, handleGeocodeResponseIp);
    } else {
      defaultlocationPackage();    
    }
  }
  
  function defaultlocationPackage() {
    if(geolocationFlag == true) return;
    console.log('Using defaultlocationPackage');
    var bounds = new google.maps.LatLngBounds();
    bounds.extend(new google.maps.LatLng(47.2701115, 5.866342499999973));
    bounds.extend(new google.maps.LatLng(55.058347, 15.041896199999996));  
    showMap(new google.maps.LatLng(51.165691, 10.451526000000058), 7, bounds);
    unshowLoadScreen();
  }
  
  function showMap(latLng, zoom, bounds) {
    
    console.log('showMap - zoom: ' + zoom + ' latLng: ' + latLng);
    var myOptions = {
      zoom: zoom,
      center: latLng,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    
    map = new google.maps.Map(document.getElementById('map_canvas'), myOptions);
    console.log('Mapstats: '+map);
    if(bounds) {
      map.fitBounds(bounds);
    }
  }
  
  /* If document is ready, begin... */
  $(document).ready(function() {     
    console.log('document ready');
     getInitialLocation();
      
  
  
  
  
      /* initialize geolocation with google Maps API, userinteraction is required */
      // geoLocate();
      /* initialise iplocation, no userinteraction required */
      //showMap(new google.maps.LatLng(google.loader.ClientLocation.latitude, google.loader.ClientLocation.longitude), 12, 'Deine Position');
      
      // $(':button#searchButton').click(function() { handleSearch($('input#search').val()); });
      
      //test();
      
      /*var input = document.getElementById('search');
      var defaultBounds = new google.maps.LatLngBounds(
        new google.maps.LatLng(-33.8902, 151.1759),
        new google.maps.LatLng(-33.8474, 151.2631)
      );
      
      var options = {
        bounds: defaultBounds,
        types: ['geocode']
      };

      var autocomplete = new google.maps.places.Autocomplete(input);
      autocomplete.bindTo('bounds', map);
      */
  });
   